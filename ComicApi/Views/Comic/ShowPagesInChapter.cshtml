@model ComicCatcherLib.ComicModels.ComicEntity

@{
    ViewBag.Title = "title";
    Layout = "_Layout";
}

<div id="app">
    <div class="row">
        <div class="col-8">
            <h2 class="center">@Model.Caption</h2>
        </div>
        <div class="col-4">
            <button v-if="pagely" class="btn btn-outline-primary btn-sm" style="font-size: 20px;" @@click="togglePagely()">連續</button>
            <button v-if="!pagely" class="btn btn-outline-primary btn-sm" style="font-size: 20px;" @@click="togglePagely()">分頁</button>
        </div>
    </div>

    <div v-for="chapter in state.chapters">
        <button class="btn btn-outline-secondary center" style="font-size: 20px;" @@click="goBack()">回上一層</button>
        <h2 style="text-align: center;">{{ chapter.currChapter.caption }}</h2>
        <div v-for="x in chapter.currChapter.pages" :id="`${chapter.chapter}_${x.pageNumber}`" class="center sapce page-info">
            <div v-if="pagely" style="width:100%;border-bottom: 1px solid"><span class="fw-bold center">{{chapter.currChapter.caption}}：第{{x.pageNumber}}頁/共{{chapter.currChapter.pages.length}}頁</span></div>
            <img :src="x.url" :class="{'continue-img-size':!pagely, 'pagely-img-size':pagely}" alt="Snow" />
            <div class="prev-page" @@click="prevPage(chapter.chapter, x)"></div>
            <div class="next-page" @@click="nextPage(chapter.chapter, x)"></div>
        </div>
        <hr />
    </div>
    <br />
    <div v-if="loading && !ending" class="loader-background"><div class="loader"></div></div>
    <button class="btn btn-outline-secondary center" style="font-size: 20px;" @@click="goBack()">回上一層</button>
    <div v-if="ending">已經是最新的了</div>
    <br /><br /><br />
    <Observer v-if="state.chapters.length > 0 && !loading && !ending" @@intersect="intersected" />
</div>

@section Scripts {
    <script type="text/javascript">
        const { createApp, onMounted, onBeforeUnmount, reactive, ref } = Vue;
        const app = createApp({
            components: {
                Observer,
            },
            setup() {
                const state = reactive({
                    chapters: [],
                });
                const loading = ref(true);
                const ending = ref(false);
                const pagely = ref(getCookie('pagely') === "true");

                const nowChapter = ref(null);
                const nowPage = ref(null);


                const pathArray = window.location.pathname.split('/');
                const chapter = pathArray[pathArray.length - 1];
                const comic = pathArray[pathArray.length - 2];

                const togglePagely = function () {
                    pagely.value = !pagely.value;
                    addCookie("pagely", pagely.value);
                }

                // 更新進度
                const updateFavoriteChapter = function (comic, chapter, chapterName) {
                    fetch("/api/favoritechapter", {
                        method: "POST",
                        credentials: "same-origin", // 帶 cookie
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            "comic": comic,
                            "chapter": chapter,
                            "chapterName": chapterName
                        })
                    });
                }
                const onKeydown = function (event) {
                    console.log('onKeydown', event.key);
                    console.log('onKeydown', nowChapter);
                    console.log('onKeydown', nowPage);
                    if (event.key === "ArrowLeft") {
                        prevPage(nowChapter.value, { pageNumber: nowPage.value });
                    }
                    else if (event.key === "ArrowRight") {
                        nextPage(nowChapter.value, { pageNumber: nowPage.value });
                    } else if (event.key === "Escape") {
                        goBack();
                    }
                }
                onMounted(async () => {
                    const response = await fetch(`/api/comic/${comic}/${chapter}`);
                    const chapterResponse = await response.json();
                    state.chapters.push(chapterResponse);

                    nowChapter.value = chapterResponse.chapter;
                    nowPage.value = 1;

                    // 更新進度
                    updateFavoriteChapter(chapterResponse.comic, chapterResponse.chapter, chapterResponse.chapterName);

                    setTimeout(() => {
                        loading.value = false;
                        document.addEventListener("keydown", onKeydown, false);
                    }, 300);

                    setTimeout(() => { if (pagely.value) gotoAnchor(`#${nowChapter.value}_${nowPage.value}`) }, 1000);

                    //setTimeout(() => { window.scrollTo(0, 1); }, 1500);

                });

                const goBack = function () {
                    const pathArray = window.location.pathname.split('/');
                    const chapter = pathArray[pathArray.length - 1];
                    const comic = pathArray[pathArray.length - 2];
                    location.href = `/comic/${comic}`;
                }

                const intersected = async function () {
                    console.log("Next~~~");
                    if (ending.value == true || loading.value == true) return;

                    loading.value = true;
                    document.body.style.cursor = "wait";
                    var lastChapter = state.chapters[state.chapters.length - 1];
                    const response = await fetch(`/api/comic/${lastChapter.comic}/${lastChapter.chapter}/next`);
                    var text = await response.text();
                    document.body.style.cursor = "default";
                    if (text == null || text == "") {
                        ending.value = true;
                        setTimeout(() => loading.value = false, 100);
                        return;
                    }
                    const chapterResponse = await JSON.parse(text);

                    history.pushState(chapterResponse, '', `/comic/${chapterResponse.comic}/${chapterResponse.chapter}`);
                    state.chapters.push(chapterResponse);

                    // 更新進度
                    updateFavoriteChapter(chapterResponse.comic, chapterResponse.chapter, chapterResponse.chapterName);

                    //if (state.chapters.length > 3) state.chapters.shift();
                    setTimeout(() => loading.value = false, 100);
                }

                const nextPage = async function (chapter, page) {
                    const currIndex = `${chapter}_${page.pageNumber}`;
                    console.log("目前頁：", currIndex);

                    let prevIndex = "";
                    let comicChapter = null;
                    for (comicChapter of state.chapters) {
                        for (const comicPage of comicChapter.currChapter.pages) {
                            //console.log("比較的頁面：", `${comicChapter.chapter}_${comicPage.pageNumber}`);

                            if (prevIndex === currIndex) {
                                gotoAnchor(`#${comicChapter.chapter}_${comicPage.pageNumber}`);
                                return;
                            }
                            prevIndex = `${comicChapter.chapter}_${comicPage.pageNumber}`;
                        }
                    }

                    console.log("取新章前：", comicChapter?.chapter)
                    // 取一次新章節後再找一次有沒有下一頁
                    if (ending == true) {
                        alert("已經是最後頁了");
                        return;
                    }

                    await intersected();
                    document.body.style.cursor = "wait";
                    setTimeout(() => {
                        document.body.style.cursor = "default";
                        var newChapter = state.chapters[state.chapters.length - 1];
                        console.log("取新章後：", newChapter?.chapter)

                        if (newChapter.chapter !== comicChapter.chapter) // 有不一樣的章節才是新章節
                        {
                            comicChapter = newChapter;
                            for (const comicPage of comicChapter.currChapter.pages) {
                                console.log("比較的頁面：", `${comicChapter.chapter}_${comicPage.pageNumber}`);

                                if (prevIndex === currIndex) {
                                    gotoAnchor(`#${comicChapter.chapter}_${comicPage.pageNumber}`);
                                    return;
                                }
                                prevIndex = `${comicChapter.chapter}_${comicPage.pageNumber}`;
                            }
                        }
                        alert(ending ? "已經是最後頁了" : "再等等...");
                    }, 300);
                }

                const prevPage = function (chapter, page) {
                    const currIndex = `${chapter}_${page.pageNumber}`;
                    console.log("目前頁：", currIndex);

                    let prevIndex = currIndex;
                    for (const comicChapter of state.chapters) {
                        for (const comicPage of comicChapter.currChapter.pages) {
                            console.log("比較的頁面：", `${comicChapter.chapter}_${comicPage.pageNumber}`);
                            if (comicChapter.chapter === chapter && comicPage.pageNumber === page.pageNumber) {
                                if (prevIndex === currIndex) {
                                    alert("已經是第一頁了");
                                    return;
                                }
                                else {
                                    gotoAnchor(`#${prevIndex}`);
                                    return;
                                }
                            }
                            prevIndex = `${comicChapter.chapter}_${comicPage.pageNumber}`;
                        }
                    }
                    alert("沒頁可跳");
                }

                const gotoAnchor = function (anchor) {
                    nowChapter.value = anchor.split('_')[0].replace("#", "");
                    nowPage.value = parseInt(anchor.split('_')[1]);
                    var url = location.href;
                    location.href = anchor;
                    history.replaceState(null, null, url);
                    return;
                }

                return {
                    state,
                    goBack,
                    loading,
                    ending,

                    pagely,
                    togglePagely,

                    nextPage,
                    prevPage,
                    nowChapter,
                    nowPage,
                    intersected
                }
            }
        });
        //app.component(Observer);
        app.mount('#app');
        console.log("start app", app);
    </script>
}
