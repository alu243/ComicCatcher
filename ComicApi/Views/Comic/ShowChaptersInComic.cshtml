@{
    ViewBag.Title = "Comic";
    Layout = "_Layout";
}

<div id="app">
    <h2 class="center">{{state.currComic?.caption}}</h2>
    <button class="btn btn-outline-primary" style="font-size: 20px;" @@click="goBack()">回上一層</button>
    <div v-if="loading">讀取中...</div>
    <div class="row row-cols-md-4 row-cols-3 gx-1 gy-1">
        <div class="col" v-for="chapter in state.currComic?.chapters">
            <div style="padding:3px" class="chapter" @@click="goChapter(chapter)">
                <span :class="{'text-primary': state.readedChapter === getRelativePath(chapter?.url)}">{{chapter?.caption}}</span>
            </div>
        </div>
    </div>
    <button class="btn btn-outline-primary" style="font-size: 20px;" @@click="goBack()">回上一層</button>
</div>


@section Scripts {
    <script type="text/javascript">
        const { createApp, onMounted, onBeforeUnmount, reactive, ref } = Vue;
        const app = createApp({
            components: {
                Observer,
            },
            setup() {
                const state = reactive({
                    page: 1,
                    comic: null,
                    currComic: null,
                    readedChapter: null,
                });
                const loading = ref(true);

                const pathArray = window.location.pathname.split('/');
                const comic = pathArray[pathArray.length - 1];

                const getRelativePath = function (url) {
                    url = url.trim().replace(/\/$/g, '');
                    const pathArray = url.split('/');
                    const result = pathArray[pathArray.length - 1];
                    return result;
                }

                onMounted(async () => {
                    const response = await fetch(`/api/comic/${comic}`);
                    const comicResponse = await response.json();
                    state.page = comicResponse.pageNumber ?? 1;
                    state.comic = comicResponse.comic;
                    state.currComic = comicResponse.currComic;
                    state.readedChapter = comicResponse.readedChapter

                    setTimeout(() => loading.value = false, 2000);
                });

                const goChapter = function (chapter) {
                    var relative = getRelativePath(chapter.url);
                    location.href = `./${state.comic}/${relative}`;
                }

                const goBack = function () {
                    location.href = `/page/${state.page}`;
                }

                return {
                    state,
                    goBack,
                    goChapter,
                    loading,
                    getRelativePath
                }
            }
        });
        //app.component(Observer);
        app.mount('#app');
        console.log("start app", app);
    </script>
}
