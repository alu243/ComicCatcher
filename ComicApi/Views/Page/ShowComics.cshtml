@{
    ViewBag.Title = "Pagination";
    Layout = "_Layout";
}

<br />
<div id="app">
    <button class="btn btn-outline-primary" @@click="goto((state.page?.tabNumber ?? 1)+'?filter=showAll')" :disabled="queryString == '?filter=showAll'">全部</button>
    &nbsp;
    <button class="btn btn-outline-primary" @@click="goto((state.page?.tabNumber ?? 1)+'?filter=favorite')" :disabled="queryString == '?filter=favorite'">最愛</button>
    &nbsp;
    <button class="btn btn-outline-primary" @@click="goto(state.page?.tabNumber ?? 1)" :disabled="queryString == ''">預設</button>
    <br />
    <nav class="center">
        <ul class="pagination">
            <li class="page-item"><a class="page-link" :href="(state.page?.tabNumber - 1 <= 0 ? state.page?.tabNumber : state.page?.tabNumber - 1) + queryString">前一頁</a></li>
            <li :class="{'page-item':true, 'active':page.tabNumber === state.page?.tabNumber}" v-for="page in getShowPages(state.pages)">
                <a class="page-link"
                   :href="page.tabNumber + queryString">
                    {{page.caption}}
                </a>
            </li>
            <li class="page-item"><a class="page-link" :href="(state.page?.tabNumber + 1 > 300 ? 300 : state.page?.tabNumber + 1) + queryString">後一頁</a></li>
        </ul>
    </nav>
    <div v-if="loading" class="loader-background"><div class="loader"></div></div>

    <div class="row row-cols-3 row-cols-sm-4 row-cols-md-5 row-cols-lg-6 gx-1">
        <div class="col" v-for="comic in state.comics">
            <div class="card">
                <div class="g-0 comic-info">
                    <a :href="getComicAction(comic)">
                        <img style="width:100%" :src="comic.iconUrl" />
                    </a>
                    <button v-if="comic.isIgnore" class="btn btn-primary btn-sm btnleft" style="padding:1px 4px;" @@click="deleteIgnoreComic(comic)"><i class="bi bi-eye-fill"></i></button>
                    <button v-if="!comic.isIgnore" class="btn btn-primary btn-sm btnleft" style="padding:1px 4px;" @@click="addIgnoreComic(comic)"><i class="bi bi-eye-slash-fill"></i></button>
                    <button v-if="comic.isFavorite" class="btn btn-danger btn-sm btnright" style="padding:1px 4px;" @@click="deleteFavoriteComic(comic)"><i class="bi bi-heart-fill"></i></button>
                    <button v-if="!comic.isFavorite" class="btn btn-danger btn-sm btnright" style="padding:1px 4px;" @@click="addFavoriteComic(comic)"><i class="bi bi-heart"></i></button>
                </div>
                <div class="card-body g-1" style="padding:3px">
                    <p :class="{'card-title': true, 'text-primary': comic.isFavorite ,'fw-bold': comic.isFavorite, 'lh-sm':true }" style="font-size:14px;padding-top:3px">{{comic.caption}}</p>
                    <p class="card-text lh-sm center" style="font-size:14px; color:darkgray">>{{comic.readedChapter}}{{comic.readedChapter?'/':''}}{{comic.lastUpdateChapter}}<</p>
                </div>
            </div>
        </div>
    </div>

    <br />
    <nav class="center">
        <ul class="pagination">
            <li class="page-item"><a class="page-link" :href="(state.page?.tabNumber - 1 <= 0 ? state.page?.tabNumber : state.page?.tabNumber - 1) + queryString">前一頁</a></li>
            <li :class="{'page-item':true, 'active':page.tabNumber === state.page?.tabNumber}" v-for="page in getShowPages(state.pages)">
                <a class="page-link"
                   :href="page.tabNumber + queryString">
                    {{page.caption}}
                </a>
            </li>
            <li class="page-item"><a class="page-link" :href="(state.page?.tabNumber + 1 > 300 ? 300 : state.page?.tabNumber + 1) + queryString">後一頁</a></li>
        </ul>
    </nav>
    <br />
    <br />
</div>


@section Scripts {
    <script type="text/javascript">
        const { createApp, onMounted, onBeforeUnmount, reactive, ref } = Vue;
        const app = createApp({
            setup() {
                const state = reactive({
                    page: null,
                    comics: null,
                    pages: null,
                });
                const loading = ref(true);
                const queryString = ref(window.location.search);

                const pathArray = window.location.pathname.split('/');
                const page = pathArray[pathArray.length - 1];

                onMounted(async () => {
                    await loadPage();
                    setTimeout(() => {
                        window.scroll(0, 1);
                    }, 300);
                });

                async function loadPage() {
                    const response1 = await fetch(`/api/page`);
                    const pagesResponse = await response1.json();
                    state.pages = pagesResponse?.paginations;

                    const response = await fetch(`/api/page/${page}${queryString.value}`);
                    const pageResponse = await response.json();
                    state.page = pageResponse?.currPagination;
                    state.comics = pageResponse?.comics;

                    addCookie("currentPage", page + queryString.value ?? "");

                    setTimeout(() => loading.value = false, 100);
                }

                const getShowPages = function () {
                    if (state.pages == null) return [];

                    const pageSection = 7;

                    let minTabNumber = state.page?.tabNumber - pageSection / 2;
                    if (minTabNumber <= 0) minTabNumber = 0;
                    const maxTabNumber = minTabNumber + pageSection;

                    var pages = [];
                    console.log("pages", state.pages)
                    for (var eachPage of state.pages) {
                        if (minTabNumber <= eachPage.tabNumber && eachPage.tabNumber < maxTabNumber) {
                            pages.push(eachPage);
                        }
                    }
                    return pages;
                }

                //function chunkedList(list) {
                //    if (list == null) return [];
                //    var cols = 5;
                //    return list.reduce((result, item, index) => {
                //        const chunkIndex = Math.floor(index / cols);

                //        if (!result[chunkIndex]) {
                //            result[chunkIndex] = [] // start a new chunk
                //        }
                //        result[chunkIndex].push(item)

                //        return result;
                //    }, []);
                //}

                function getComic(url) {
                    url = url.trim().replace(/\/$/g, '');
                    const pathArray = url.split('/');
                    const comic = pathArray[pathArray.length - 1];
                    return comic;
                }

                function getComicAction(comic) {
                    const c = getComic(comic.url);
                    return `../comic/${c}`;
                }

                function addIgnoreComic(comic) {
                    if (confirm(`要隱藏[${comic.caption}]嗎？`) == true) {
                        var request = { "comic": getComic(comic.url), "comicName": comic.caption };
                        fetch("/api/IgnoreComic", {
                            method: "POST",
                            credentials: "same-origin", // 帶 cookie
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify(request)
                        }).then(response => {
                            loadPage();
                        }).catch((error) => {
                            console.log(error);
                            alert("哦哦，被你玩壞了");
                        })
                    }
                }

                function deleteIgnoreComic(comic) {
                    var request = { "comic": getComic(comic.url) };
                    fetch("/api/IgnoreComic", {
                        method: "DELETE",
                        credentials: "same-origin", // 帶 cookie
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(request)
                    }).then(response => {
                        loadPage();
                    }).catch((error) => {
                        console.log(error);
                        alert("哦哦，被你玩壞了");
                    })
                }


                function addFavoriteComic(comic) {
                    var request = { "comic": getComic(comic.url), "comicName": comic.caption, "iconUrl": comic.iconUrl };
                    fetch("/api/FavoriteComic", {
                        method: "POST",
                        credentials: "same-origin", // 帶 cookie
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(request)
                    }).then(response => {
                        comic.isFavorite = true;
                    }).catch((error) => {
                        console.log(error);
                        alert("哦哦，被你玩壞了");
                    })
                }

                function deleteFavoriteComic(comic) {
                    var request = { "comic": getComic(comic.url) };
                    fetch("/api/FavoriteComic", {
                        method: "DELETE",
                        credentials: "same-origin", // 帶 cookie
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(request)
                    }).then(response => {
                        comic.isFavorite = false;
                    }).catch((error) => {
                        console.log(error);
                        alert("哦哦，被你玩壞了");
                    })
                }

                function goto(url) {
                    location.href = url;
                }

                return {
                    goto,
                    state,
                    loading,
                    getShowPages,
                    //chunkedList,
                    queryString,
                    getComicAction,
                    addIgnoreComic,
                    deleteIgnoreComic,
                    addFavoriteComic,
                    deleteFavoriteComic
                }
            }
        });
        //app.component(Observer);
        app.mount('#app');
        console.log("start app", app);
    </script>
}