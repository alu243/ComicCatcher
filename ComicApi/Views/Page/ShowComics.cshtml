@{
    ViewBag.Title = "Pagination";
    Layout = "_Layout";
}

<br />
<div id="app">
    <button onclick="location.href='/page/1?filter=showAll'">顯示全部</button>
    <button onclick="location.href='/page/1'">隱藏</button>
    <br />
    <span v-for="page in state.pages">
        <b v-if="isShowPage(page) && page.tabNumber === state.page?.tabNumber">{{page.caption}}</b>
        <a v-if="isShowPage(page) && page.tabNumber !== state.page?.tabNumber" :href="page.tabNumber">{{page.caption}}</a>
    </span>
    <div v-if="loading">讀取中...</div>

    <div class="row" style="--bs-gutter-x: 0.5rem; --bs-gutter-y: 1rem;">
        <div class="col" v-for="comic in state.comics">
            <div class="card" style="width: 14rem;">
                <a :href="getComicAction(comic)" target="_comic">
                    <img :src="comic.iconUrl" />
                </a>
                <div class="card-body">
                    <button v-if="comic.isIgnore" style="font-size: 16px;" @@click="deleteIgnoreComic(comic)">顯示</button>
                    <button v-if="!comic.isIgnore" style="font-size: 16px;" @@click="addIgnoreComic(comic)">隱藏</button>
                    &nbsp;&nbsp;
                    <button v-if="comic.isFavorite" style="font-size: 16px;" @@click="deleteFavoriteComic(comic)">移除最愛</button>
                    <button v-if="!comic.isFavorite" style="font-size: 16px;" @@click="addFavoriteComic(comic)">加入最愛</button>
                    <h5 class="card-title">
                        <span v-if="comic.isFavorite" style="color:blue;font-weight: 900;">{{comic.caption}}</span>
                        <span v-if="!comic.isFavorite" style="font-weight: 600;">{{comic.caption}}</span>
                    </h5>
                    <p class="card-text" style="color:darkgray">最新：{{comic.readedChapter}}{{comic.readedChapter?'/':''}}{{comic.lastUpdateChapter}}</p>
                </div>
            </div>
        </div>
    </div>

    <span v-for="page in state.pages">
        <b v-if="isShowPage(page) && page.tabNumber === state.page?.tabNumber">{{page.caption}}</b>
        <a v-if="isShowPage(page) && page.tabNumber !== state.page?.tabNumber" :href="page.tabNumber">{{page.caption}}</a>
    </span>
</div>


@section Scripts {
    <script type="text/javascript">
        const { createApp, onMounted, onBeforeUnmount, reactive, ref } = Vue;
        const app = createApp({
            setup() {
                const state = reactive({
                    page: null,
                    comics: null,
                    pages: null,
                });
                const loading = ref(true);

                const pathArray = window.location.pathname.split('/');
                const page = pathArray[pathArray.length - 1];
                const queryString = window.location.search;

                onMounted(async () => await loadPage());

                async function loadPage() {
                    const response1 = await fetch(`/api/page`);
                    const pagesResponse = await response1.json();
                    state.pages = pagesResponse?.paginations;

                    const response = await fetch(`/api/page/${page}${queryString}`);
                    const pageResponse = await response.json();
                    state.page = pageResponse?.currPagination;
                    state.comics = pageResponse?.comics;

                    setTimeout(() => loading.value = false, 1000);
                }

                function isShowPage(eachPage) {
                    const pageSection = 7;

                    let minTabNumber = state.page?.tabNumber - pageSection / 2;
                    if (minTabNumber <= 0) minTabNumber = 0;
                    const maxTabNumber = minTabNumber + pageSection;
                    return minTabNumber <= eachPage.tabNumber &&
                        eachPage.tabNumber < maxTabNumber;
                }

                //function chunkedList(list) {
                //    if (list == null) return [];
                //    var cols = 5;
                //    return list.reduce((result, item, index) => {
                //        const chunkIndex = Math.floor(index / cols);

                //        if (!result[chunkIndex]) {
                //            result[chunkIndex] = [] // start a new chunk
                //        }
                //        result[chunkIndex].push(item)

                //        return result;
                //    }, []);
                //}

                function getComic(url) {
                    url = url.trim().replace(/\/$/g, '');
                    const pathArray = url.split('/');
                    const comic = pathArray[pathArray.length - 1];
                    return comic;
                }

                function getComicAction(comic) {
                    const c = getComic(comic.url);
                    return `../comic/${c}`;
                }

                function addIgnoreComic(comic, comicName) {
                    var request = { "comic": getComic(comic.url), "comicName": comic.caption };
                    fetch("/api/IgnoreComic", {
                        method: "POST",
                        credentials: "same-origin", // 帶 cookie
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(request)
                    }).then(response => {
                        loadPage();
                    }).catch((error) => {
                        console.log(error);
                        alert("哦哦，被你玩壞了");
                    })
                }

                function deleteIgnoreComic(comic) {
                    var request = { "comic": getComic(comic.url) };
                    fetch("/api/IgnoreComic", {
                        method: "DELETE",
                        credentials: "same-origin", // 帶 cookie
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(request)
                    }).then(response => {
                        loadPage();
                    }).catch((error) => {
                        console.log(error);
                        alert("哦哦，被你玩壞了");
                    })
                }


                function addFavoriteComic(comic) {
                    var request = { "comic": getComic(comic.url), "comicName": comic.caption, "iconUrl": comic.iconUrl };
                    fetch("/api/FavoriteComic", {
                        method: "POST",
                        credentials: "same-origin", // 帶 cookie
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(request)
                    }).then(response => {
                        comic.isFavorite = true;
                    }).catch((error) => {
                        console.log(error);
                        alert("哦哦，被你玩壞了");
                    })
                }

                function deleteFavoriteComic(comic) {
                    var request = { "comic": getComic(comic.url) };
                    fetch("/api/FavoriteComic", {
                        method: "DELETE",
                        credentials: "same-origin", // 帶 cookie
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(request)
                    }).then(response => {
                        comic.isFavorite = false;
                    }).catch((error) => {
                        console.log(error);
                        alert("哦哦，被你玩壞了");
                    })
                }

                return {
                    state,
                    loading,
                    isShowPage,
                    //chunkedList,
                    getComicAction,
                    addIgnoreComic,
                    deleteIgnoreComic,
                    addFavoriteComic,
                    deleteFavoriteComic
                }
            }
        });
        //app.component(Observer);
        app.mount('#app');
        console.log("start app", app);
    </script>
}